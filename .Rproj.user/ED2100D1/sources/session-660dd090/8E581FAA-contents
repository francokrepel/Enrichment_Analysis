---
title: "enrichment"
output: html_document
date: "2023-04-12"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
BiocManager::install(c("DESeq2", "tidyverse", "data.table", "biomaRt", "ComplexHeatmap", "circlize"))
```

Enrichment:
```{r}
library(rWikiPathways)
library(ReactomePA)
library(pathview)
library(clusterProfiler)
library(org.Mm.eg.db)
```
Other:
```{r}
library(apeglm)
library(EnhancedVolcano)
```

## Reading in counts file and getting rid of genes with 0 counts in any of the samples
```{r}
setwd("~/Documents/College/Research/Exosome_Project")
library(DESeq2)
library(tidyverse)
library(data.table)
library(biomaRt)
library(ComplexHeatmap)
library(circlize)

# Import Counts Data
counts <- fread("gene_counts_matrix.csv")

# Import Metadata
metadata <- fread("metadata.csv")

# Changing Metadata Biological_Component Column Name
setnames(metadata, "Biological Component", "BC")
setnames(metadata, "Sample ID", "SampleID")

# Changing Gene Column Name
setnames(counts, "V1", "GeneID")

# Adding a Max Counts Column to Calc Rows to Remove
counts$Max <- apply(counts[,10:17], MARGIN = 1, FUN = max, na.rm = TRUE)
# Removing ~ 5834 genes that had less than 1 count
counts_data <- counts[Max >= 1]
# Only Pulling Counts Columns into new Data Table
counts_data <- counts_data[,c(1,10:17)]

```

# Switching from EnsemblID to MGI Gene Names
```{r}
### NOTE, biomart did not make MGI names all caps. If run into problems later, force CAPS

mart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
mapped_data <- getBM(attributes = c("ensembl_gene_id", "mgi_symbol"), filters = "ensembl_gene_id", values = counts_data$GeneID, mart=mart)

mapped_data <- data.table(mapped_data[!(is.na(mapped_data$mgi_symbol) | mapped_data$mgi_symbol==""), ])
#combine tables
setkey(mapped_data, "ensembl_gene_id")
setkey(counts_data, "GeneID")
counts_data_filtered <- (mapped_data[counts_data, nomatch=0])
# Only 56 genes not identified

# change colnames to match metadata
oldNames <- c("counts....results.X1_quant.quant.sf","counts....results.X2_quant.quant.sf","counts....results.X3_quant.quant.sf","counts....results.X4_quant.quant.sf","counts....results.X5_quant.quant.sf","counts....results.X6_quant.quant.sf","counts....results.X7_quant.quant.sf","counts....results.X8_quant.quant.sf")
newNames <- c("X1","X2","X3","X4","X5","X6","X7","X8")
setnames(counts_data_filtered, oldNames, newNames)

```

```{r}
# If any duplicate IDs exist when converted, replace counts values with mean intensity of duplicate IDs
# Testing: ‘4933427D14Rik’, ‘Aldoa’, ‘Atp5o’, ‘Bfar’, ‘Fam220a’, ‘Fam90a1b’, ‘Gcat’, ‘Gm18645’, ‘Gm7270’, ‘Ndor1’, ‘Nrg1’, ‘Or5ae1’, ‘Pakap’, ‘Ptp4a1’, ‘Septin2’, ‘St6galnac2’

# If any duplicate IDs exist when converted, replace counts values with mean intensity of duplicate IDs
counts_unique <- counts_data_filtered %>% rowwise() %>% mutate(int_mean = mean(c_across(newNames))) %>% arrange(desc(int_mean)) %>% group_by(mgi_symbol) %>% filter(row_number() == 1) %>% distinct(.keep_all=TRUE)

# Remove int_mean column, ENSEMBL column, and make mgi_symbol the rownames
counts_unique <- dplyr::select(counts_unique, -ensembl_gene_id, -int_mean)
counts_unique <- tibble::column_to_rownames(counts_unique,"mgi_symbol")
```


## Trying out DESeq2
```{r}
# Creating DESeq Data Set from Metadata and Prepared Counts Data Table
# note, count data was not integers so round() function was used to ensure they are integers

# releveling to reference membrane to do Cyto vs. Mem and Exo vs. Mem
metadata$BC <- relevel(factor(metadata$BC), ref="Membrane")
dds <- DESeqDataSetFromMatrix(countData = round(counts_unique),
                               colData = metadata,
                               design = ~ BC)
dds

# Create different contrast combinations for analysis
contCytoMem = c("BC","Cytoplasma","Membrane")
contCytoExo = c("BC","Exosome","Cytoplasma")
contMemExo = c("BC","Exosome","Membrane")

ddsGenerated <- DESeq(dds)
```
```{r}
# Cytoplasm vs Membrane Comparison
resultsNames(ddsGenerated)
CytoMemResults = results(ddsGenerated, name='BC_Cytoplasma_vs_Membrane', contrast=contCytoMem)
CytoMemResults <- lfcShrink(ddsGenerated, coef = "BC_Cytoplasma_vs_Membrane",  type="apeglm")
```

```{r}
# Cytoplasma vs Membrane DataFrame

df_CytoMem <- CytoMemResults %>%
  # make into data.frame
  as.data.frame() %>%
  # the gene names are row names -- let's make them a column for easy display
  tibble::rownames_to_column("Gene") %>%
  # add a column for significance threshold results
  dplyr::mutate(threshold = padj < 0.05) %>%
  # sort by statistic -- the highest values will be genes with
  # higher expression in RPL10 mutated samples
  dplyr::arrange(dplyr::desc(log2FoldChange))

# Creating Volcano Plot
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
  df_CytoMem,
  title = "Cytoplasma vs. Membrane",
  lab = df_CytoMem$Gene,
  x = "log2FoldChange",
  y = "padj",
  pCutoff = 0.01 # Loosen the cutoff since we supplied corrected p-values
)
volcano_plot

# NOTE: 15 statistically significant, no LFC though
```

```{r}
BiocManager::install("apeglm")
library(apeglm)
# Exosome vs Membrane Data Frame
resultsNames(ddsGenerated)
ExoMemResults = results(ddsGenerated, name='BC_Exosome_vs_Membrane', contrast=contMemExo)
ExoMemResults <- lfcShrink(ddsGenerated, coef = "BC_Exosome_vs_Membrane",  type="apeglm")

df_ExoMem <- ExoMemResults %>%
  # make into data.frame
  as.data.frame() %>%
  # the gene names are row names -- let's make them a column for easy display
  tibble::rownames_to_column("Gene") %>%
  # add a column for significance threshold results
  dplyr::mutate(threshold = padj < 0.05) %>%
  # sort by statistic -- the highest values will be genes with
  # higher expression in RPL10 mutated samples
  dplyr::arrange(dplyr::desc(log2FoldChange))

# Creating Volcano Plot
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
  df_ExoMem,
  title = "Exosome vs. Membrane",
  lab = df_ExoMem$Gene,
  x = "log2FoldChange",
  y = "padj",
  pCutoff = 0.01 # Loosen the cutoff since we supplied corrected p-values
)
volcano_plot

# NOTE: 6036 TRUE threshold genes, 1170 downregulated, 4217 upregulated, 649 statistically significant but not LFC
# NOTE: ~2000 FALSE threshold genes but with Differential Expression (|LFC| > 1)

```

```{r}
# Exosome vs. Cytoplasma DataFrame

metadata$BC <- relevel(factor(metadata$BC), ref="Cytoplasma")
dds <- DESeqDataSetFromMatrix(countData = round(counts_unique),
                               colData = metadata,
                               design = ~ BC)
ddsGenerated <- DESeq(dds)
resultsNames(ddsGenerated)

ExoCytoResults = results(ddsGenerated, name='BC_Exosome_vs_Cytoplasma', contrast=contCytoExo)
ExoCytoResults <- lfcShrink(ddsGenerated, coef = "BC_Exosome_vs_Cytoplasma",  type="apeglm")

df_ExoCyto <- ExoCytoResults %>%
  # make into data.frame
  as.data.frame() %>%
  # the gene names are row names -- let's make them a column for easy display
  tibble::rownames_to_column("Gene") %>%
  # add a column for significance threshold results
  dplyr::mutate(threshold = padj < 0.05) %>%
  # sort by statistic -- the highest values will be genes with
  # higher expression in RPL10 mutated samples
  dplyr::arrange(dplyr::desc(log2FoldChange))

# Creating Volcano Plot
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
  df_ExoCyto,
  title = "Exosome vs. Cytoplasma",
  lab = df_ExoCyto$Gene,
  x = "log2FoldChange",
  y = "padj",
  pCutoff = 0.01 # Loosen the cutoff since we supplied corrected p-values
)
volcano_plot

# NOTE: 7139 total TRUE threshold genes: 1184 p-val only, 1392 downregulated, 4563 upregulated
# NOTE: ~2000 FALSE threshold genes but with Differential Expression (|LFC| > 1)
```
# Processing to Create Heatmap
```{r}
# Create Master Dataset for all SSGs (Statistically Significant Genes)
sub_CytoMem <- df_CytoMem %>% filter(threshold == TRUE)
sub_ExoCyto <- df_ExoCyto %>% filter(threshold == TRUE)
sub_ExoMem <- df_ExoMem %>% filter(threshold == TRUE)

# Combine the three data frames using the bind_rows
combined_df <- bind_rows(sub_CytoMem, sub_ExoCyto, sub_ExoMem)
# Keep only unique values of "Gene"
unique_df <- distinct(combined_df, Gene, .keep_all = TRUE)

# add gene column back to counts and filter counts list by unique_df (only SSGs will be in counts)
counts_test <- counts_unique %>% tibble::rownames_to_column("mgi_symbol") %>% setnames("mgi_symbol", "Gene")
ct_filter <- semi_join(counts_test, unique_df, by = "Gene")

# create copy of counts that are normalized (log2 + 1)
log_ct_filter <- ct_filter 
log_ct_filter <- log_ct_filter %>% mutate(across(c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8"), ~ log2(. + 1))) %>% tibble::column_to_rownames(var="Gene")

# Heatmap Generation

# Calculate maximum value of each row
max_vals <- apply(log_ct_filter, 1, max, na.rm = TRUE)

# Create color palette based on max expression levels
  #col <- colors(100)[findInterval(na.omit(max_vals), c(-3, 0, 3))]
# Get maximum value for each row
max_vals <- apply(as.matrix(log_ct_filter), 1, max)

# Define color scale
col <- colorRamp2(c(-2, 0, 2), c("#4575b4", "#f7f7f7", "#d73027"))

cal_z_score <- function(x){
  (x - mean(x)) / sd(x)
}
 
normalized <- t(apply(log_ct_filter, 1, cal_z_score))

# Create heatmap
ht_map <- Heatmap(
  as.matrix(t(normalized)),
  name = "Normalized Counts",
  cluster_rows = TRUE,
  cluster_columns = TRUE,
  show_row_names = TRUE,
  show_column_names = FALSE,
  col = col,
  row_title = "Samples",
  column_title = "Genes",
  row_dend_reorder = TRUE,
  column_dend_reorder = TRUE,
  heatmap_legend_param = list(title = "Counts Z-Scored")
  )
  # Add the row side color bar
  #name_row_side = "DE",
  #row_side_colors = list(
  #  DE = colorRamp2(c(FALSE, TRUE), c("white", "red"))(de_genes$Comparison_1)
  #
  draw(ht_map)
```

Enrichment Analysis, install packages
```{r}
BiocManager::install("clusterProfiler")
apeglm
BiocManager::install("org.Mm.eg.db") # Mouse gene database
library(clusterProfiler)
library(org.Mm.eg.db)
```


```{r}
gene_list <- unique_df$Gene
# Convert gene symbols to Entrez gene IDs
entrez_ids <- mapIds(org.Mm.eg.db, keys = unique_df$Gene, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")

# name the vector


```


Prepare list of significantly differentially expressed genes from  analysis.
```{r}
# Extract the gene symbols of significant DEGs
sig_genes <- unique_df$Gene
```

Map the gene symbols to Entrez IDs, as required for clusterProfiler.
```{r}
# Map gene symbols to Entrez IDs
entrez_ids <- mapIds(org.Mm.eg.db, keys=sig_genes, column="ENTREZID", keytype="SYMBOL")
```
GO enrichment analysis.
```{r}
go_enrichment <- gseGO(
  gene = entrez_ids,
  OrgDb = org.Mm.eg.db,
  ont = "ALL", # "BP" for Biological Process or MF for molecular
  pAdjustMethod = "BH", # Benjamini-Hochberg adjustment
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.2
)

# Visualize results
barplot(go_enrichment, showCategory=10, title = "GO Enrichment")

# Convert barplot to ggplot object
g <- ggplot_build(bp)$plot

# Save ggplot as PNG file
ggsave("go_enrichment.png", g, dpi = 300)
```

 KEGG pathway enrichment analysis.
```{r}
# KEGG enrichment analysis
kegg_enrichment <- enrichKEGG(
  gene = entrez_ids,
  organism = "mmu", # Mouse
  pAdjustMethod = "BH", # Benjamini-Hochberg adjustment
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.2
)

# Visualize results
barplot(kegg_enrichment, showCategory=10, title = "KEGG Enrichment")

# Convert barplot to ggplot object
g <- ggplot_build(bp)$plot

# Save ggplot as PNG file
ggsave("kegg_enrichment.png", g, dpi = 300)

```

```{r}
BiocManager::install("pathview")
library(pathview)
```

```{r}
# Select the top pathway or any other pathway of interest
top_pathway <- kegg_enrichment$ID[1]
```

```{r}
# Plot KEGG pathway
pathview(gene.data = entrez_ids, pathway.id = top_pathway, species = "mmu")

```

```{r}
BiocManager::install(c("ReactomePA"))
library(ReactomePA)
```

```{r}
# Reactome Enrichment Analysis
reactome_enrichment <- enrichPathway(
  gene = entrez_ids,
  organism = "mouse", # for human data
  pAdjustMethod = "BH", # Benjamini-Hochberg adjustment
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.2
)

# Visualize results
barplot(reactome_enrichment, showCategory = 10, title = "Reactome Enrichment")

# Convert barplot to ggplot object
g <- ggplot_build(bp)$plot

# Save ggplot as PNG file
ggsave("reactome_enrichment.png", g, dpi = 300)
```
Wikiways:
```{r}
# BiocManager::install("rWikiPathways")
library(rWikiPathways)
```

```{r}
entrez_ids
```

```{r}
# WikiPathways Enrichment Analysis
wp_enrichment <- enrichWP(
  gene = entrez_ids,
  organism = "mmu", # Mouse
  pAdjustMethod = "BH", # Benjamini-Hochberg adjustment
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.2,
)

# Visualize results
barplot(wp_enrichment, showCategory = 10)

```

